{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","background","setBackground","current","setCurrent","useEffect","timeoutId","setTimeout","clearTimeout","className","style","map","color","index","filter","boxShadow","onClick","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA0DeA,MAtDf,WACE,IAiBA,EAAoCC,mBAAS,WAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAWA,OARAC,qBAAU,WACR,IAAMC,EAAYC,YAAW,WAC3BH,EAAW,QACV,KACH,OAAO,kBAAMI,aAAaF,MACzB,CAACH,IAIF,sBAAKM,UAAU,MAAMC,MAAO,CAAET,WAAYA,GAA1C,UACE,oBAAIQ,UAAU,cACF,OAAZN,GAAoB,qBAAIM,UAAU,YAAd,oBAAiC,6BAAKN,OAC3D,uDACA,qBAAKM,UAAU,YAAf,SAlCY,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAuBWE,KAAI,SAACC,EAAOC,GAAR,OACV,sBAAiBJ,UAAU,OAA3B,UACE,qBAAKC,MAAO,CACVT,WAAYW,EACZE,OAAQ,kBACRC,UAAWH,IAAUX,EAAa,eAAiB,IAClDQ,UAAU,MAAMO,QAAS,kBAAMd,EAAcU,MAEhD,cAAC,kBAAD,CAAiBK,KAAI,UAAKL,GAA1B,SACE,mBAAGF,MAAO,CAACE,MAAOA,IAAUX,EAAa,OAASW,GAAQI,QAAS,kBAAMZ,EAAWQ,IAApF,SAA6FA,QARvFC,YC7BJK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da9499c8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction App() {\n  const colors = [\n    \"#282a36\",\n    \"#44475a\",\n    \"#44475a\",\n    \"#f8f8f2\",\n    \"#6272a4\",\n    \"#8be9fd\",\n    \"#50fa7b\",\n    \"#ffb86c\",\n    \"#ff79c6\",\n    \"#bd93f9\",\n    \"#ff5555\",\n    \"#f1fa8c\"\n  ];\n\n\n\n  const [background, setBackground] = useState(\"#282a36\");\n  const [current, setCurrent] = useState(null);\n\n  // clear the copy text after time\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setCurrent(null);\n    }, 10000);\n    return () => clearTimeout(timeoutId);\n  }, [current]);\n\n\n  return (\n    <div className=\"App\" style={{ background: background}}>\n      <h1 className=\"copy-text\"></h1>\n     {current !== null && <h1 className=\"copy-text\">Copied <h1>{current}</h1></h1>}\n     <h1>Dracula Color Palette</h1>\n     <div className=\"container\">\n       {colors.map((color, index) => (\n         <div key={index} className=\"card\">\n           <div style={{\n             background: color,\n             filter: \"brightness(85%)\",\n             boxShadow: color === background ? \"0 0 5px #000\" : \"\"\n           }} className=\"box\" onClick={() => setBackground(color)} />\n           {/* copy the text to clipboard on click */}\n           <CopyToClipboard text={`${color}`}>\n             <p style={{color: color === background ? \"#fff\" : color}} onClick={() => setCurrent(color)}>{color}</p>\n           </CopyToClipboard>\n         </div>\n       ))}\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}